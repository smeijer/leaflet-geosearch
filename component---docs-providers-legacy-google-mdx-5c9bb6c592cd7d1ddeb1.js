(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{"+ehd":function(e,o,t){"use strict";t.r(o),t.d(o,"_frontmatter",(function(){return c})),t.d(o,"default",(function(){return g}));var n=t("Fcif"),r=t("+I+c"),a=(t("mXGw"),t("/FXl")),l=t("TjRS"),p=t("KUxS"),i=t("yYOO"),s=(t("aD51"),["components"]),c={};void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!Object.prototype.hasOwnProperty.call(c,"__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/providers/legacy-google.mdx"}});var d={_frontmatter:c},b=l.a;function g(e){var o,t=e.components,g=Object(r.a)(e,s);return Object(a.b)(b,Object(n.a)({},d,g,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"legacy-google-provider"},"Legacy Google Provider"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},Object(a.b)("u",null,"WARNING"),": This provider is unsafe to use and should be considered ",Object(a.b)("u",null,"DEPRECATED"),".\nIt is strongly suggested to use the new ",Object(a.b)("a",{parentName:"strong",href:"/providers/google"},"Google Provider"),". If you're currently migrating from a previous version\nand you still wish to use this provider you should pull in the ",Object(a.b)("inlineCode",{parentName:"strong"},"LegacyGoogleProvider")," class\nand rename your references accordingly.")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"note"),": Google services require an API key. ",Object(a.b)("a",{parentName:"p",href:"https://developers.google.com/maps/documentation/javascript/get-api-key"},"Obtain here"),".\nFor more options and configurations, see the ",Object(a.b)("a",{parentName:"p",href:"https://developers.google.com/maps/documentation/geocoding/start"},"Google Maps developer docs"),"."),Object(a.b)(p.a,{__position:0,__code:'<Map provider="Google" />',__scope:(o={props:g,DefaultLayout:l.a,Playground:p.a,Map:i.a},o.DefaultLayout=l.a,o._frontmatter=c,o),mdxType:"Playground"},Object(a.b)(i.a,{provider:"Google",mdxType:"Map"})),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"import { LegacyGoogleProvider } from 'leaflet-geosearch';\n\nconst provider = new LegacyGoogleProvider({\n  params: {\n    key: '__YOUR_GOOGLE_KEY__',\n  },\n});\n\n// add to leaflet\nimport { GeoSearchControl } from 'leaflet-geosearch';\n\nmap.addControl(\n  new GeoSearchControl({\n    provider,\n    style: 'bar',\n  }),\n);\n")),Object(a.b)("h2",{id:"optional-parameters"},"Optional parameters"),Object(a.b)("p",null,"Google supports a number of ",Object(a.b)("a",{parentName:"p",href:"https://developers.google.com/maps/documentation/geocoding/intro#geocoding"},"optional parameters"),". As Google requires those parameters to be added to the url, they can be added to the ",Object(a.b)("inlineCode",{parentName:"p"},"params")," key of the provider."),Object(a.b)("p",null,"All options defined next to the ",Object(a.b)("inlineCode",{parentName:"p"},"params")," key, would have been added to the request body."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"const provider = new LegacyGoogleProvider({\n  params: {\n    key: '__YOUR_GOOGLE_KEY__',\n    language: 'nl', // render results in Dutch\n    region: 'nl', // prioritize matches within The Netherlands\n  },\n});\n")))}void 0!==g&&g&&g===Object(g)&&Object.isExtensible(g)&&!Object.prototype.hasOwnProperty.call(g,"__filemeta")&&Object.defineProperty(g,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/providers/legacy-google.mdx"}}),g.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-providers-legacy-google-mdx-5c9bb6c592cd7d1ddeb1.js.map